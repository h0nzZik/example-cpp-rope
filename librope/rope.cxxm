// https://en.wikipedia.org/wiki/Rope_(data_structure)
module;

#include <string>
#include <variant>
#include <memory>
#include <optional>
#include <cassert>
#include <algorithm>
#include <vector>

#include <gsl/gsl>


export module rope;

// As in https://en.cppreference.com/w/cpp/utility/variant/visit
template<class... Ts>
struct overloaded : Ts... { using Ts::operator()...; };

struct Leaf;
struct InnerNode;
using Node = std::variant<Leaf, InnerNode>;

class ManagedNode final : private std::unique_ptr<Node> {
public:
    ManagedNode() = default;
    ManagedNode(ManagedNode && old);
    explicit ManagedNode(Node node);
    ManagedNode(ManagedNode const &other);

    ManagedNode& operator=(ManagedNode other) noexcept;

    using std::unique_ptr<Node>::get;
    using std::unique_ptr<Node>::operator*;
    using std::unique_ptr<Node>::operator->;
    using std::unique_ptr<Node>::operator bool;
};

struct Leaf final {
    std::string s;
    size_t length;
};

struct InnerNode final {
    std::string s;
    size_t length;
    size_t sum_of_lengths_of_left_subtree;
    ManagedNode left;
    ManagedNode right;
};

ManagedNode& ManagedNode::operator=(ManagedNode other) noexcept {
    other.swap(*this);
    return *this;
}

ManagedNode::ManagedNode(ManagedNode && old) = default;

ManagedNode::ManagedNode(Node node) : std::unique_ptr<Node>(std::make_unique<Node>(std::move(node))) {}

ManagedNode::ManagedNode(ManagedNode const &other) : std::unique_ptr<Node>(other?std::make_unique<Node>(*other) : nullptr) {

}

size_t sum_of_lengths(Node const &node) {
    return std::visit(overloaded{
            [](Leaf const &leaf) -> size_t { return leaf.length; },
            [](InnerNode const &inner_node) -> size_t {
                return sum_of_lengths(*inner_node.left) + sum_of_lengths(*inner_node.right);
            }
        },
        node
    );
}

template <typename Num>
Num fib(Num n) {
    if (n == 0) {
        return 0;
    }

    if (n == 1) {
        return 1;
    }

    Num i = 2;
    Num fi = 2;
    Num fim1 = 1;
    Num fim2 = 0;
    // invariant:
    //    fi == i-th Fibonacci number
    // && fim1 == (i-1)-th Fibonacci number
    // && fim2 == (i-2)-th Fibonacci number
    while (i < n) {
        Num const next_fi = fim1 + fim2;
        fim2 = fim1;
        fim1 = fi;
        fi = next_fi;
        i++;
    }
    assert(i == n);
    return fi;
}

size_t depth(Node const &node) {
    return std::visit(overloaded{
        [](Leaf const &) -> size_t { return 0; },
        [](InnerNode const &inner_node) -> size_t {
            return 1 + std::max(depth(*inner_node.left), depth(*inner_node.right));
        }
    }, node);
}

size_t length_of(Node const &node) {
    return std::visit(overloaded{
        [](Leaf const &leaf) { return leaf.length; },
        [](InnerNode const &inner_node) { return inner_node.length; }
    }, node);
}

bool is_balanced(Node const &node) {
    size_t const n = depth(node);
    size_t const Fnp2 = fib<size_t>(n+2);
    return length_of(node) >= Fnp2;
}

// Collect leaves
// --------------
// Create a stack S and a list L.
// Traverse down the left-most spine of the tree until you reach a leaf l',
// adding each node N to S. Add l' to L.
// The parent of l' (p) is at the top of the stack.
// Repeat the procedure for p's right subtree.
std::vector<Leaf const *> collect_leaves(Node const &node) {
    std::vector<Node const *> stack{};
    std::vector<Leaf const *> leaves{};

    // TODO: use GSL's `not_null` type
    // pre: curr_node != nullptr
    // post: !leaves.empty()
    auto const traverse_downleft = [&stack,&leaves](Node const *curr_node) {
        assert (curr_node != nullptr);
        // invariant: curr_node != nullptr
        while (std::holds_alternative<InnerNode>(*curr_node)) {
            stack.push_back(curr_node);
            InnerNode const * const curr_inner_node = std::get_if<InnerNode>(curr_node);
            assert (curr_inner_node != nullptr);
            curr_node = curr_inner_node->left.get();
            assert (curr_node != nullptr);
        }
        assert(std::holds_alternative<Leaf>(*curr_node));
        Leaf const * const curr_leaf = std::get_if<Leaf>(curr_node);
        assert (curr_leaf != nullptr);
        leaves.push_back(curr_leaf);
    };

    traverse_downleft(&node);
    while(!stack.empty()) {
        Node const * const top_node = stack.back();
        stack.pop_back();
        traverse_downleft(top_node);
    }

    return leaves;
}


// Rebalance
// ---------
// Collect the set of leaves L and rebuild the tree from the bottom-up.


class Rope {
private:
    ManagedNode root;


    explicit Rope(ManagedNode n);
    static Rope concatenate(Rope const &a, Rope const &b);
public:
    Rope() = default;
    Rope(Rope const &other) = default;
    Rope(Rope &&old) = default;
};

Rope::Rope(ManagedNode n) : root(std::move(n)) {

}

Rope Rope::concatenate(Rope const &a, Rope const &b) {
    /* From Wikipedia:
        A concatenation can be performed simply by creating a new root node with left = S1 and right = S2,
        which is constant time. The weight of the parent node is set to the length of the left child S1,
        which would take O( log ‚Å° N ) time, if the tree is balanced. 
     */
    if (a.root && !b.root) {
        return Rope{a};
    }
    if (!a.root && b.root) {
        return Rope{b};
    }
    if (!a.root && !b.root) {
        return Rope{};
    }
    assert (a.root && b.root);

    size_t const left_len = sum_of_lengths(*a.root);


    /*
      The main reason for existence of the `ManageNode` class is that
      I wanted the `InnerNode` class to be an aggregate, so that I can use
      designated initializers here.
    */
    InnerNode in{
        .s = {},
        .length = 0,
        .sum_of_lengths_of_left_subtree = left_len,
        .left = a.root,
        .right = b.root,
    };
    return Rope{ManagedNode{Node{in}}};
}




/* This is just to test that the build system with modules work */
export int rope_something() {
    return 3;
}

